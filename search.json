[{"title":"Hello World","url":"https://Xmtd.github.io/2019/10/18/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">启动</span><br><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo g -d</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">清楚缓存</span><br><span class=\"line\">hexo clean</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","categories":[],"tags":[]},{"title":"lodash之concat","url":"https://Xmtd.github.io/2019/10/18/lodash之concat/","content":"<p>function copyArray(source, array) {<br>    var index = -1,<br>        length = source.length;</p>\n<pre><code>// 这里判断 array 是否为 undefined，如果是就定义一个与 source 长度相等的数组。\narray || (array = Array(length));\n\nwhile (++index &lt; length) {\n    array[index] = source[index];\n}\nreturn array;</code></pre><p>}</p>\n<p>// arrayPush方法是在传入的参数array基础上进行拼接的<br>function arrayPush(array, values) {<br>    var index = -1,<br>        length = values.length,<br>        offset = array.length;</p>\n<pre><code>while (++index &lt; length) {\n    array[offset + index] = values[index];\n}\nreturn array;\n/**\n * 举例分析：\n * arrayPush([1,2,3], [4, [5]]);\n * 刚进来 index = -1;  length = 2; offset = 3;\n * 进入循环\n * index = 0; offset + index = 3; array[3] = values[0] = 4;\n * index = 1; offset + index = 4; array[4] = values[1] = [5];\n * index = 2; 停止循环\n *\n * array = [1,2,3,4,[5]]\n *\n */</code></pre><p>}</p>\n<p>var isArray = Array.isArray;</p>\n<p>// 这个方法是在判断 value 是否是可以被打平的 arguments 对象或者数组。如果是，返回 true，若不是，则返回 false<br>function isFlattenable(value) {<br>    return isArray(value) || isArguments(value) ||<br>        !!(spreadableSymbol &amp;&amp; value &amp;&amp; value[spreadableSymbol]);<br>}</p>\n<p>/**<br> *</p>\n<ul>\n<li><p>@param array</p>\n</li>\n<li><p>@param depth</p>\n</li>\n<li><p>@param predicate  每次迭代调用的函数</p>\n</li>\n<li><p>@param isStrict   限制</p>\n</li>\n<li><p>@param result</p>\n</li>\n<li><p>@returns {Array}</p>\n</li>\n<li><p>/<br>// 减少嵌套数组<br>function baseFlatten(array, depth, predicate, isStrict, result) {   // 2, [3], [4], -1: [1]<br>  var index = -1,</p>\n<pre><code>length = array.length;</code></pre><p>  // 判断是否传入 predicate, 若没有，将方法 isFlattenable 赋值给 predicate<br>  predicate || (predicate = isFlattenable);</p>\n<p>  result || (result = []);</p>\n<p>  //[1,[3], [4, [5]]]</p>\n<p>  while (++index &lt; length) {</p>\n<pre><code>var value = array[index];\nif (depth &gt; 0 &amp;&amp; predicate(value)) {\n    if (depth &gt; 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n    } else {\n        arrayPush(result, value);\n    }\n} else if (!isStrict) {\n    result[result.length] = value;\n}</code></pre><p>  }<br>  return result;<br>}</p>\n</li>\n</ul>\n<p>// 源码<br>// _.concat(array, [values])  创建一个新数组，将array与任何数组 或 值连接在一起<br>/**<br>var array = [1];<br>var other = _.concat(array, 2, [3], [[4]]);</p>\n<p>console.log(other);<br>// =&gt; [1, 2, 3, [4]]</p>\n<p>console.log(array);<br>*/<br>function concat() {  // [1], 2, [3], [4]<br>    // 获取参数个数<br>    var length = arguments.length;</p>\n<pre><code>if (!length) {\n    return [];\n}\n\nvar args = Array(length - 1),   // 去除0索引以外的参数\n    array = arguments[0],      // 第一个元素\n    index = length;\n\n// 从后往前添加\nwhile (index--) {\n    args[index - 1] = arguments[index];\n    /**\n     * 4 index = 3;  args[2] = arguments[3] = [4];\n     * 3 index = 2;  args[1] = arguments[2] = [3];\n     * 2 index = 1;  args[0] = arguments[1] = 2;\n     * 1 index = 0;  args[-1] = arguments[0] = [1];\n     * args = [2, [3], [4], -1: [1]]\n     */\n}\nreturn arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));</code></pre><p>}</p>\n","categories":[],"tags":["源码"]}]